# Copyright (c) 2024-2025 Roni Raihan
# Some code functions, generated by AI ChatGPT < https://chat.openai.com/ >

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see < https://www.gnu.org/licenses/ >.


import bpy
from bpy.props import (
    FloatProperty,
    FloatVectorProperty,
    EnumProperty,
    IntProperty,
    BoolProperty,
    CollectionProperty
)
#from . import operatorvrm
    
#-----------------------------------------------------------------------
list_tulang_hilang = []
list_parent_hilang = []

class info_rig_masalah(bpy.types.Operator):
    bl_idname = "obj.info_masalah_rig"
    bl_label = "Info"
    bl_options = {'REGISTER', 'UNDO'}
    
    fb0 : bpy.props.StringProperty(name= "Bone", default= "")
    fb1 : bpy.props.StringProperty(name= "Bone", default= "")
    fb2 : bpy.props.StringProperty(name= "Bone", default= "")
    fb3 : bpy.props.StringProperty(name= "Bone", default= "")
    fb4 : bpy.props.StringProperty(name= "Bone", default= "")
    fb5 : bpy.props.StringProperty(name= "Bone", default= "")
    fb6 : bpy.props.StringProperty(name= "Bone", default= "")
    fb7 : bpy.props.StringProperty(name= "Bone", default= "")
    fb8 : bpy.props.StringProperty(name= "Bone", default= "")
    fb9 : bpy.props.StringProperty(name= "Bone", default= "")
    
    def execute(self, context):
        bpy.ops.obj.cek_rig()
        return {'FINISHED'}
    
    def invoke(self, context, event):
        bpy.ops.obj.cek_rig()
        return context.window_manager.invoke_popup(self)
        #return {'FINISHED'}
        
    def draw(self, context):
        global list_tulang_hilang
        global list_parent_hilang
        dmta = bpy.context.scene.vrm_meta
        layout = self.layout
        if dmta.find_bone and dmta.find_parent:
            layout.label(text= "Bone none have mising part", icon= 'CHECKMARK')
        else:
            row = layout.row()
            if not dmta.find_bone:
                jumlah_bone = len(list_tulang_hilang)
                text_mising_bone = ("Mising required bone (%i Bone) :" % (jumlah_bone))
                layout.label(text= text_mising_bone, icon= 'ERROR')
            
                box = layout.box()
                kotak = box.column()
                kotak.scale_y = 0.9
                kotak.label(text= "Tips:", icon= 'QUESTION')
                kotak.label(text= "Add bones with this name in Armature Rig Main", icon= 'BLANK1')
                dalam = kotak.box()
                sd = dalam.column()
                dalam = sd.row()
                kumpul = dalam.column()
                if jumlah_bone > 0:
                    self.fb0 = list_tulang_hilang[0]
                    kumpul.prop(self, "fb0", text = "")
                if jumlah_bone > 1:
                    self.fb1 = list_tulang_hilang[1]
                    kumpul.prop(self, "fb1", text = "")
                if jumlah_bone > 2:
                    self.fb2 = list_tulang_hilang[2]
                    kumpul.prop(self, "fb2", text = "")
                if jumlah_bone > 3:
                    self.fb3 = list_tulang_hilang[3]
                    kumpul.prop(self, "fb3", text = "")
                if jumlah_bone > 4:
                    self.fb4 = list_tulang_hilang[4]
                    kumpul.prop(self, "fb4", text = "")
                if jumlah_bone > 5:
                    kumpul = dalam.split()
                    kumpul = kumpul.column()
                    self.fb5 = list_tulang_hilang[5]
                    kumpul.prop(self, "fb5", text = "")
                if jumlah_bone > 6:
                    self.fb6 = list_tulang_hilang[6]
                    kumpul.prop(self, "fb6", text = "")
                if jumlah_bone > 7:
                    self.fb7 = list_tulang_hilang[7]
                    kumpul.prop(self, "fb7", text = "")
                if jumlah_bone > 8:
                    self.fb8 = list_tulang_hilang[8]
                    kumpul.prop(self, "fb8", text = "")
                if jumlah_bone > 9:
                    self.fb9 = list_tulang_hilang[9]
                    kumpul.prop(self, "fb9", text = "")
                if jumlah_bone > 10:
                    ld10 = ("And more %i Bone" % (jumlah_bone - 10))
                    sd.label(text= ld10)
                row = layout.row()
            
            if not dmta.find_parent:
                jumlah_mispare = len(list_parent_hilang)
                
                text_mispare = ("Bone has incorrect Parent (%i Bone):" % (jumlah_mispare))
                layout.label(text= text_mispare, icon= 'ERROR')
                box = layout.box()
                kotak = box.column()
                kotak.scale_y = 0.9
                    
                print ("list_parent_hilang", list_parent_hilang)
                if jumlah_mispare > 0:
                    ng = list_parent_hilang[0]['ng']
                    ka = list_parent_hilang[0]['ka']
                    al = list_parent_hilang[0]['al']
                    al2 = list_parent_hilang[0]['al2']
                    if al2 == al:
                        daft1 = ("Bone : %s must be parent to Bone: %s or %s" % (ng, ka, al))
                        if al == ka:
                            daft1 = ("Bone : %s must be parent to Bone: %s" % (ng, ka))
                    else:
                        daft1 = ("Bone : %s must be parent to Bone: %s or %s or %s" % (ng, ka, al, al2))
                    kotak.label(text= daft1)
                if jumlah_mispare > 1:
                    ng = list_parent_hilang[1]['ng']
                    ka = list_parent_hilang[1]['ka']
                    al = list_parent_hilang[1]['al']
                    al2 = list_parent_hilang[1]['al2']
                    if al2 == al:
                        daft2 = ("Bone : %s must be parent to Bone: %s or %s" % (ng, ka, al))
                        if al == ka:
                            daft2 = ("Bone : %s must be parent to Bone: %s" % (ng, ka))
                    else:
                        daft2 = ("Bone : %s must be parent to Bone: %s or %s or %s" % (ng, ka, al, al2))
                    kotak.label(text= daft2)
                if jumlah_mispare > 2:
                    ng = list_parent_hilang[2]['ng']
                    ka = list_parent_hilang[2]['ka']
                    al = list_parent_hilang[2]['al']
                    al2 = list_parent_hilang[2]['al2']
                    if al2 == al:
                        daft3 = ("Bone : %s must be parent to Bone: %s or %s" % (ng, ka, al))
                        if al == ka:
                            daft3 = ("Bone : %s must be parent to Bone: %s" % (ng, ka))
                    else:
                        daft3 = ("Bone : %s must be parent to Bone: %s or %s or %s" % (ng, ka, al, al2))
                    kotak.label(text= daft3)
                if jumlah_mispare > 3:
                    ng = list_parent_hilang[3]['ng']
                    ka = list_parent_hilang[3]['ka']
                    al = list_parent_hilang[3]['al']
                    al2 = list_parent_hilang[3]['al2']
                    if al2 == al:
                        daft4 = ("Bone : %s must be parent to Bone: %s or %s" % (ng, ka, al))
                        if al == ka:
                            daft4 = ("Bone : %s must be parent to Bone: %s" % (ng, ka))
                    else:
                        daft4 = ("Bone : %s must be parent to Bone: %s or %s or %s" % (ng, ka, al, al2))
                    kotak.label(text= daft4)
                if jumlah_mispare > 4:
                    ng = list_parent_hilang[4]['ng']
                    ka = list_parent_hilang[4]['ka']
                    al = list_parent_hilang[4]['al']
                    al2 = list_parent_hilang[4]['al2']
                    if al2 == al:
                        daft5 = ("Bone : %s must be parent to Bone: %s or %s" % (ng, ka, al))
                        if al == ka:
                            daft5 = ("Bone : %s must be parent to Bone: %s" % (ng, ka))
                    else:
                        daft5 = ("Bone : %s must be parent to Bone: %s or %s or %s" % (ng, ka, al, al2))
                    kotak.label(text= daft5)
                if jumlah_mispare > 5:
                    more_mispare = jumlah_mispare - 5
                    text_more_mispare = ("And more %i Bone" % (more_mispare))
                    kotak.label(text= text_more_mispare)
    
class cek_struktur_rig(bpy.types.Operator):
    bl_idname = "obj.cek_rig"
    bl_label = "Cek Rig"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        global list_tulang_hilang
        global list_parent_hilang
        
        dmta = bpy.context.scene.vrm_meta
        rig = dmta.rig
        tulang = rig.data.bones

        list_tulang_hilang = []
        list_parent_hilang = []
        
        #Mencari tulang yang hilang
        tulang_harus = [ #Required bone (https://github.com/vrm-c/vrm-specification/tree/master/specification/0.0#defined-bones)
            "root", "hips", "upper_leg.L", "lower_leg.L", "foot.L",
            "upper_leg.R", "lower_leg.R", "foot.R", "spine", "chest", 
            "upper_arm.L", "lower_arm.L", "hand.L", "upper_arm.R", 
            "lower_arm.R", "hand.R", "neck", "head", "RightEye", "LeftEye"
        ]
                    #"Bone", "Bone.003", "Bone.005", "pambalain", "hilang"]
        
        tulang_ada = []
        list_tulang_hilang = []
        for bone in tulang:
            pilih_tulang = [item for item in tulang_harus if item == bone.name]
            tulang_ada.extend(pilih_tulang)
        list_tulang_hilang = [item for item in tulang_harus if item not in tulang_ada]
        if list_tulang_hilang == []:
            dmta.find_bone = True
        else:
            dmta.find_bone = False
            
        #print ("tulang", tulang)
        #print ("")
        #print ("tulang_harus", tulang_harus)
        #print ("")
        #print ("tulang_ada", tulang_ada)
        #print ("")
        #print ("list_tulang_hilang", list_tulang_hilang)
        
        #mencari parent yang hilang (19 bone)
        parent_harus = [
            #Required bone
            {'ng' : 'hips', 'ka' : 'root', 'al' : 'root', 'al2' : 'root'}, #"hips" 
            {'ng' : 'upper_leg.L', 'ka' : 'hips', 'al' : 'hips', 'al2' : 'hips'}, #"upper_leg.L" 
            {'ng' : 'lower_leg.L', 'ka' : 'upper_leg.L', 'al' : 'upper_leg.L', 'al2' : 'upper_leg.L'}, #"lower_leg.L" 
            {'ng' : 'foot.L', 'ka' : 'lower_leg.L', 'al' : 'lower_leg.L', 'al2' : 'lower_leg.L'}, #"foot.L" 
            {'ng' : 'upper_leg.R', 'ka' : 'hips', 'al' : 'hips', 'al2' : 'hips'}, #"upper_leg.R" 
            {'ng' : 'lower_leg.R', 'ka' : 'upper_leg.R', 'al' : 'upper_leg.R', 'al2' : 'upper_leg.R'}, #"lower_leg.R" 
            {'ng' : 'foot.R', 'ka' : 'lower_leg.R', 'al' : 'lower_leg.R', 'al2' : 'lower_leg.R'}, #"foot.R" 
            {'ng' : 'spine', 'ka' : 'hips', 'al' : 'hips', 'al2' : 'hips'}, #"spine" 
            {'ng' : 'chest', 'ka' : 'spine', 'al' : 'spine', 'al2' : 'spine'}, #"chest" 
            {'ng' : 'upper_arm.L', 'ka' : 'shoulder.L', 'al' : 'upperChest', 'al2' : 'chest'}, #"upper_arm.L" 
            {'ng' : 'lower_arm.L', 'ka' : 'upper_arm.L', 'al' : 'upper_arm.L', 'al2' : 'upper_arm.L'}, #"lower_arm.L" 
            {'ng' : 'hand.L', 'ka' : 'lower_arm.L', 'al' : 'lower_arm.L', 'al2' : 'lower_arm.L'}, #"hand.L" 
            {'ng' : 'upper_arm.R', 'ka' : 'shoulder.R', 'al' : 'upperChest', 'al2' : 'chest'}, #"upper_arm.R" 
            {'ng' : 'lower_arm.R', 'ka' : 'upper_arm.R', 'al' : 'upper_arm.R', 'al2' : 'upper_arm.R'}, #"lower_arm.R" 
            {'ng' : 'hand.R', 'ka' : 'lower_arm.R', 'al' : 'lower_arm.R', 'al2' : 'lower_arm.R'}, #"hand.R" 
            {'ng' : 'neck', 'ka' : 'chest', 'al' : 'upperChest', 'al2' : 'upperChest'}, #"neck" 
            {'ng' : 'head', 'ka' : 'neck', 'al' : 'neck', 'al2' : 'neck'}, #"head" 
            {'ng' : 'RightEye', 'ka' : 'head', 'al' : 'head', 'al2' : 'head'}, #"RightEye" 
            {'ng' : 'LeftEye', 'ka' : 'head', 'al' : 'head', 'al2' : 'head'},  #"LeftEye" 
            #Optional bone
            {'ng' : 'shoulder.R', 'ka' : 'chest', 'al' : 'upperChest', 'al2' : 'upperChest'}, #shoulder.R
            {'ng' : 'shoulder.L', 'ka' : 'chest', 'al' : 'upperChest', 'al2' : 'upperChest'}, #shoulder.L
            {'ng' : 'upperChest', 'ka' : 'chest', 'al' : 'chest', 'al2' : 'chest'}, #upperChest
            ]
        
        list_parent_hilang = [] #
        if tulang_ada: #memeriksa daftar tulang yang ada
            for item in parent_harus: #untuk setiap item di parent_harus lakukan
                ng = item['ng']
                ka = item['ka']
                al = item['al']
                al2 = item['al2']
                for bone in tulang:
                    if bone.name == ng: #memilih tulang yang diperiksa
                        if bone.parent:
                            #if bone.parent.name.startswith(ka) or bone.parent.name.startswith(al) or bone.parent.name.startswith(al2): #memeriksa parent
                            if bone.parent.name == ka or bone.parent.name == al or bone.parent.name == al2:
                                continue
                            else: #jika parent salah
                                pilih_bone_salah_parent = [{'ng' : ng, 'ka' : ka, 'al' : al, 'al2' : al2}]
                                list_parent_hilang.extend(pilih_bone_salah_parent)
                        else:
                            pilih_bone_salah_parent = [{'ng' : ng, 'ka' : ka, 'al' : al, 'al2' : al2}]
                            list_parent_hilang.extend(pilih_bone_salah_parent)
        
        if list_parent_hilang == []: #jika tidak ada bone yang salah parent
            dmta.find_parent = True #parent lengkap
        else:
            dmta.find_parent = False #parent tidak lengkap
            
        #print ("find_bone", dmta.find_bone)
        #print ("find_parent", dmta.find_parent)
        
        #print ("")
        #print ("list_parent_hilang", list_parent_hilang)
        
        #emplementasi info
#        for item in list_parent_hilang:
#            ngaran_tulang = item['ngaranya']
#            ngaran_parent = item['kasananya']
#            infonya = ["Bone :", ngaran_tulang, "must be parent to bone", ngaran_parent]
#            print ("")
#            print (item)
#            print ("")
#            print (infonya)

        return {'FINISHED'}

class buat_mhv(bpy.types.Operator):
    bl_idname = "obj.generate_mhv"
    bl_label = "Generate Preexport"
    bl_options = {'REGISTER', 'UNDO'}
    
    def persiapkan(self, context, dmta, rig, model, semua_obj, anakan_rig, anakan_model, vl, list_obj_dis, list_obj_allow):
#        print (" ")
#        print ("mempersiapkan")
        bpy.ops.view3d.snap_cursor_to_center()
        bpy.ops.object.select_all(action='DESELECT')
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR', center='MEDIAN')
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.transform_apply(location=False, rotation=True, scale=False)
        bpy.ops.object.transform_apply(location=False, rotation=False, scale=True)
        bpy.ops.object.select_all(action='DESELECT')
        
        #Buat daftar object yang tanpa vertex grub
        list_mesh = [obj for obj in list_obj_allow if obj.type == 'MESH']
        
        #Buat bone extra
        bvg_name = "bone_sbcierh_usrbtpb"
        
        if bvg_name not in rig.data.bones:
            rig.select_set(True)
            bpy.context.view_layer.objects.active = rig
            bpy.ops.object.mode_set(mode='EDIT')
            bpy.context.scene.cursor.location[0] = 2.1
            bpy.context.scene.cursor.location[1] = 2.8
            bpy.context.scene.cursor.location[2] = 3
            bpy.ops.armature.bone_primitive_add(name= bvg_name)
            bpy.ops.object.mode_set(mode='OBJECT')
            bpy.ops.object.select_all(action='DESELECT')

        #buat vertex grub pada object di list_mesh
        if not list_mesh == []:
            for obj in list_mesh:
                if len(obj.vertex_groups) == 0:
                    dapat = bpy.data.objects.get(obj.name)
                    dapat.vertex_groups.new(name= bvg_name)
                    bpy.ops.object.select_all(action='DESELECT')
                    obj.select_set(True)
                    bpy.context.view_layer.objects.active = dapat
                    bpy.ops.object.mode_set(mode='EDIT')
                    bpy.ops.mesh.select_all(action='DESELECT')
                    bpy.ops.mesh.select_all(action='SELECT')
                    bpy.context.object.vertex_groups.active_index = dapat.vertex_groups[bvg_name].index
                    bpy.context.scene.tool_settings.vertex_group_weight = 1
                    bpy.ops.object.vertex_group_assign()
                    bpy.ops.object.mode_set(mode='OBJECT')
                    bpy.ops.object.select_all(action='DESELECT')
                else:
                    continue

        return {'FINISHED'}
        
    def execute(self, context):
        dmta = bpy.context.scene.vrm_meta
        rig = dmta.rig
        model = dmta.model
        semua_obj = bpy.context.scene.objects
        anakan_rig = rig.children_recursive
        anakan_model = model.children_recursive
        vl = bpy.context.view_layer.objects
                
        #memilah object yang tidak ikut
        list1_1 = list(obj for obj in semua_obj)
        list1_2 = list(obj for obj in vl)
        list1_3 = [item for item in list1_1 if item not in list1_2]
        
        list2_1 = [rig, model]
        list2_2 = [item for item in list1_2 if item not in list2_1]
        list2_3 = [item for item in list2_2 if item not in anakan_rig]
        list2_4 = [item for item in list2_3 if item not in anakan_model]
        
        list_obj_dis = list1_3 + list2_4
        list_obj_allow = [item for item in list1_1 if item not in list_obj_dis]

#        print ("list1_3",list1_3)
#        print (" ")
#        print ("list2_2",list2_2)
#        print (" ")
#        print ("anakan_rig",anakan_rig)
#        print (" ")
#        print ("list2_3",list2_3)
#        print (" ")
#        print ("list2_4",list2_4)
#        print (" ")
#        print ("list_obj_dis",list_obj_dis)
#        print (" ")
#        print ("list_obj_allow",list_obj_allow)
        
        #mencek kelengkapan object
        if list_obj_allow == []:
            dmta.find_obj = False
        else :
            dmta.find_obj = True
            if rig in list_obj_allow:
                dmta.find_rig = True
                if model in list_obj_allow:
                    dmta.find_model = True
                else:
                    dmta.find_model = False
            else:
                dmta.find_rig = False
        
        #mencek kelengkapan bone
        bpy.ops.obj.cek_rig()
        
        mod_gagal_aplay = []
        for obj in list_obj_allow:
            for mod in obj.modifiers:
                if obj.data.shape_keys:
                #for key in obj.data.shape_keys:
                    if not mod or not mod.show_viewport:
                        dmta.amwsk_gagal = False

                    if mod.type in ('ARMATURE', 'COLLISION'):
                        dmta.amwsk_gagal = False
                    else:
                        mod_gagal_aplay = [mod.type]
                        dmta.amwsk_gagal = True

        #fungsi dijalankan apabila lengkap
        if dmta.find_obj and dmta.find_rig and dmta.find_model and dmta.find_bone and dmta.find_parent:
            bpy.ops.object.mode_set(mode='OBJECT')
            for obj in semua_obj:
                obj.hide_set(False)
                obj.hide_select = False
                
            bpy.ops.object.select_all(action='DESELECT')
            if not list_obj_dis == []:
                for obj in list_obj_dis:
                    obj.hide_viewport = True
            model.select_set(True)
            rig.select_set(True)
            bpy.context.view_layer.objects.active = rig
            for obj in list_obj_allow:
                obj.select_set(True)
                
            self.persiapkan(context, dmta, rig, model, semua_obj, anakan_rig, anakan_model, vl, list_obj_dis, list_obj_allow)
        
        return {'FINISHED'}
    
class buat_bsk(bpy.types.Operator):
    bl_idname = "obj.generate_bsk"
    bl_label = "Generate Main Shape Keys"
    bl_options = {'REGISTER', 'UNDO'}
    
    joy : bpy.props.StringProperty(
        name= "Joy",
        default= "Joy"
    )
    angry : bpy.props.StringProperty(
        name= "Angry",
        default= "Angry"
    )
    sorrow : bpy.props.StringProperty(
        name= "Sorrow",
        default= "Sorrow"
    )
    fun : bpy.props.StringProperty(
        name= "Fun",
        default= "Fun"
    )
    blink : bpy.props.StringProperty(
        name= "Blink All",
        default= "Blink"
    )
    blink_l : bpy.props.StringProperty(
        name= "Blink Left",
        default= "Blink_L"
    )
    blink_r : bpy.props.StringProperty(
        name= "Blink Right",
        default= "Blink_R"
    )
    brows_up : bpy.props.StringProperty(
        name= "Brows Up",
        default= "Brows_Up"
    )
    brows_down : bpy.props.StringProperty(
        name= "Brows Down",
        default= "Brows_Down"
    )
    v_a : bpy.props.StringProperty(
        name= "A",
        default= "A"
    )
    v_i : bpy.props.StringProperty(
        name= "I",
        default= "I"
    )
    v_u : bpy.props.StringProperty(
        name= "U",
        default= "U"
    )
    v_e : bpy.props.StringProperty(
        name= "E",
        default= "E"
    )
    v_o : bpy.props.StringProperty(
        name= "O",
        default= "O"
    )
    lookup : bpy.props.StringProperty(
        name= "Look Up",
        default= "Look_Up"
    )
    lookdown : bpy.props.StringProperty(
        name= "Look Down",
        default= "Look_Down"
    )
    lookleft : bpy.props.StringProperty(
        name= "Look Left",
        default= "Look_Left"
    )
    lookright : bpy.props.StringProperty(
        name= "Look Right",
        default= "Look_Right"
    )

    def execute(self, context):
        scene = context.scene
        meta = bpy.context.scene.vrm_meta
        model = scene.vrm_meta.model
        
        model.shape_key_add(name="Basis")
        
        model.shape_key_add(name=self.joy)
        model.shape_key_add(name=self.angry)
        model.shape_key_add(name=self.sorrow)
        model.shape_key_add(name=self.fun)
        model.shape_key_add(name=self.blink)
        model.shape_key_add(name=self.blink_l)
        model.shape_key_add(name=self.blink_r)
        model.shape_key_add(name=self.brows_up)
        model.shape_key_add(name=self.brows_down)
        
        model.shape_key_add(name=self.lookup)
        model.shape_key_add(name=self.lookdown)
        model.shape_key_add(name=self.lookleft)
        model.shape_key_add(name=self.lookright)
        
        model.shape_key_add(name=self.v_a)
        model.shape_key_add(name=self.v_i)
        model.shape_key_add(name=self.v_u)
        model.shape_key_add(name=self.v_e)
        model.shape_key_add(name=self.v_o)
        
        meta.joy = self.joy
        meta.angry = self.angry
        meta.sorrow = self.sorrow
        meta.fun = self.fun
        meta.blink = self.blink
        meta.blink_l = self.blink_l
        meta.blink_r = self.blink_r
        meta.brows_up = self.brows_up
        meta.brows_down = self.brows_down
        
        meta.lookup = self.lookup
        meta.lookdown = self.lookdown
        meta.lookleft = self.lookleft
        meta.lookright = self.lookright
        
        meta.v_a = self.v_a
        meta.v_i = self.v_i
        meta.v_u = self.v_u
        meta.v_e = self.v_e
        meta.v_o = self.v_o
        
        
        return {'FINISHED'}
    
    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)
    
    def draw(self, context):
        scene = context.scene
        meta = scene.vrm_meta
        
        layout = self.layout
        layout.use_property_split = True
        layout.use_property_decorate = False
        
        split = layout.split()
        col = split.column()
        col.label(text="Expresion:")
        col.prop(self, "joy")
        col.prop(self, "angry")
        col.prop(self, "sorrow")
        col.prop(self, "fun")
        col.prop(self, "blink")
        col.prop(self, "blink_l")
        col.prop(self, "blink_r")
        col.prop(self, "brows_up")
        col.prop(self, "brows_down")
        
        col = split.column(align=True)
        col.label(text="Look At:")
        col.prop(self, "lookup")
        col.prop(self, "lookdown")
        col.prop(self, "lookleft")
        col.prop(self, "lookright")
        
        row = layout.row()
        col.label(text="Mouth Lip-sync:")
        col.prop(self, "v_a")
        col.prop(self, "v_i")
        col.prop(self, "v_u")
        col.prop(self, "v_e")
        col.prop(self, "v_o")
        
        row = layout.row()
        box = layout.box()
        kotak = box.column()
        kotak.scale_y = 0.9
        kotak.label(text="Tips:", icon='QUESTION')
        kotak.label(text="Make sure to fill in all the Shape Keys names.", icon='BLANK1')
        kotak.label(text="Don't have same name on different Shape Keys.", icon='BLANK1')

class buat_rig(bpy.types.Operator):
    bl_idname = "obj.generate_rig"
    bl_label = "Generate VRM Armature Tempate"
    bl_options = {'REGISTER', 'UNDO'}
    
    nama : bpy.props.StringProperty(name= "Object Name", default= "Armature")
    terap: bpy.props.BoolProperty(name = "Set as Rig Main", default = False)
    mark_required: bpy.props.BoolProperty(name = "Required Bone", default = False)
    mark_optional: bpy.props.BoolProperty(name = "Optional Bone", default = False)
    mark_required_normal : bpy.props.FloatVectorProperty(name= "Normal", default=(0.0, 1.0, 0.0), min=0.0, max=1.0, subtype='COLOR')
    mark_required_select : bpy.props.FloatVectorProperty(name= "Select", default=(0.0, 0.0, 1.0), min=0.0, max=1.0, subtype='COLOR')
    mark_required_active : bpy.props.FloatVectorProperty(name= "Active", default=(0.0, 1.0, 1.0), min=0.0, max=1.0, subtype='COLOR')
    mark_optional_normal : bpy.props.FloatVectorProperty(name= "Normal", default=(1.0, 1.0, 0.0), min=0.0, max=1.0, subtype='COLOR')
    mark_optional_select : bpy.props.FloatVectorProperty(name= "Select", default=(0.0, 0.0, 1.0), min=0.0, max=1.0, subtype='COLOR')
    mark_optional_active : bpy.props.FloatVectorProperty(name= "Active", default=(0.0, 1.0, 1.0), min=0.0, max=1.0, subtype='COLOR')
    
    #Required Bone
    root: bpy.props.BoolProperty(name = "Root", default = True)
    hips: bpy.props.BoolProperty(name = "Hips", default = True)
    spine: bpy.props.BoolProperty(name = "Spine", default = True)
    chest: bpy.props.BoolProperty(name = "Chest", default = True)
    neck: bpy.props.BoolProperty(name = "Neck", default = True)
    head: bpy.props.BoolProperty(name = "Head", default = True)
    rightreye: bpy.props.BoolProperty(name = "Right", default = True)
    lefteye: bpy.props.BoolProperty(name = "Left", default = True)
    upper_arm_r: bpy.props.BoolProperty(name = "Upper", default = True)
    lower_arm_r: bpy.props.BoolProperty(name = "Lower", default = True)
    hand_r: bpy.props.BoolProperty(name = "Hand", default = True)
    upper_arm_l: bpy.props.BoolProperty(name = "Upper", default = True)
    lower_arm_l: bpy.props.BoolProperty(name = "Lower", default = True)
    hand_l: bpy.props.BoolProperty(name = "Hand", default = True)
    upper_leg_r: bpy.props.BoolProperty(name = "Upper", default = True)
    lower_leg_r: bpy.props.BoolProperty(name = "Lower", default = True)
    foot_r: bpy.props.BoolProperty(name = "Foot", default = True)
    upper_leg_l: bpy.props.BoolProperty(name = "Upper", default = True)
    lower_leg_l: bpy.props.BoolProperty(name = "Lower", default = True)
    foot_l: bpy.props.BoolProperty(name = "Foot", default = True)
    
    #Optional Bone
    jaw: bpy.props.BoolProperty(name = "Jaw", default = False)
    upperchest: bpy.props.BoolProperty(name = "Upper Chest", default = False)
    rightshoulder: bpy.props.BoolProperty(name = "Right", default = True)
    leftshoulder: bpy.props.BoolProperty(name = "Left", default = True)
    righttoes: bpy.props.BoolProperty(name = "Righ", default = False)
    lefttoes: bpy.props.BoolProperty(name = "Left", default = False)
    thumb_r: bpy.props.BoolProperty(name = "Thumb", default = False)
    index_r: bpy.props.BoolProperty(name = "Index", default = False)
    middle_r: bpy.props.BoolProperty(name = "Middle", default = False)
    ring_r: bpy.props.BoolProperty(name = "Ring", default = False)
    little_r: bpy.props.BoolProperty(name = "Little", default = False)
    thumb_l: bpy.props.BoolProperty(name = "Thumb", default = False)
    index_l: bpy.props.BoolProperty(name = "Index", default = False)
    middle_l: bpy.props.BoolProperty(name = "Middle", default = False)
    ring_l: bpy.props.BoolProperty(name = "Ring", default = False)
    little_l: bpy.props.BoolProperty(name = "Little", default = False)
    
    def execute(self, context):
        meta = bpy.context.scene.vrm_meta
        
        #periksa apakah ada object
        if bpy.context.active_object or bpy.context.selected_objects:
            mode = bpy.context.active_object.mode
            if not mode == 'OBJECT': #periksa mode object dan ubah menjadi `object mode`
                bpy.ops.object.mode_set(mode='OBJECT')

        #mulai generate
        bpy.ops.object.select_all(action='DESELECT') 
        bpy.ops.object.add(type='ARMATURE', enter_editmode=False, align='WORLD')
        armature = bpy.context.active_object
        
        armature.name = self.nama
            
        if self.terap == True:
            meta.rig = armature
        
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.armature.collection_add()
        
        bpy.ops.armature.select_all(action='DESELECT')
        armature_data = armature.data
        armature_data.collections[0].name = "Required"
        
        #generate bone Required
        if self.root:
            bpy.ops.armature.bone_primitive_add(name='root')
            bone = armature_data.edit_bones.get('root')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 0
            
            bone.tail.x = 0
            bone.tail.y = 0
            bone.tail.z = 0.3
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.hips:
            bpy.ops.armature.bone_primitive_add(name='hips')
            bone = armature_data.edit_bones.get('hips')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 0.735
            
            bone.tail.x = 0
            bone.tail.y = 0
            bone.tail.z = 0.85 
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.spine:
            bpy.ops.armature.bone_primitive_add(name='spine')
            bone = armature_data.edit_bones.get('spine')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 0.85
            
            bone.tail.x = 0
            bone.tail.y = 0
            bone.tail.z = 1.1 
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.chest:
            bpy.ops.armature.bone_primitive_add(name='chest')
            bone = armature_data.edit_bones.get('chest')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 1.1
            
            bone.tail.x = 0
            bone.tail.y = 0
            if self.upperchest:
                bone.tail.z = 1.3 
            else:
                bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.neck:
            bpy.ops.armature.bone_primitive_add(name='neck')
            bone = armature_data.edit_bones.get('neck')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = 0
            bone.tail.y = 0
            bone.tail.z = 1.65
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.head:
            bpy.ops.armature.bone_primitive_add(name='head')
            bone = armature_data.edit_bones.get('head')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 1.65
            
            bone.tail.x = 0
            bone.tail.y = 0
            bone.tail.z = 2
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.rightreye:
            bpy.ops.armature.bone_primitive_add(name='RightEye')
            bone = armature_data.edit_bones.get('RightEye')
            bone.head.x = 0.1
            bone.head.y = 0.15
            bone.head.z = 1.837
            
            bone.tail.x = 0.1
            bone.tail.y = 0.2
            bone.tail.z = 1.837
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.lefteye:
            bpy.ops.armature.bone_primitive_add(name='LeftEye')
            bone = armature_data.edit_bones.get('LeftEye')
            bone.head.x = -0.1
            bone.head.y = 0.15
            bone.head.z = 1.837
            
            bone.tail.x = -0.1
            bone.tail.y = 0.2
            bone.tail.z = 1.837
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.upper_arm_r:
            bpy.ops.armature.bone_primitive_add(name='upper_arm.R')
            bone = armature_data.edit_bones.get('upper_arm.R')
            bone.head.x = 0.32
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = 0.6
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.lower_arm_r:
            bpy.ops.armature.bone_primitive_add(name='lower_arm.R')
            bone = armature_data.edit_bones.get('lower_arm.R')
            bone.head.x = 0.6
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = 0.895
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.hand_r:
            bpy.ops.armature.bone_primitive_add(name='hand.R')
            bone = armature_data.edit_bones.get('hand.R')
            bone.head.x = 0.895
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = 0.995
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.upper_arm_l:
            bpy.ops.armature.bone_primitive_add(name='upper_arm.L')
            bone = armature_data.edit_bones.get('upper_arm.L')
            bone.head.x = -0.32
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = -0.6
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.lower_arm_l:
            bpy.ops.armature.bone_primitive_add(name='lower_arm.L')
            bone = armature_data.edit_bones.get('lower_arm.L')
            bone.head.x = -0.6
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = -0.895
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.hand_l:
            bpy.ops.armature.bone_primitive_add(name='hand.L')
            bone = armature_data.edit_bones.get('hand.L')
            bone.head.x = -0.895
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = -0.995
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.upper_leg_r:
            bpy.ops.armature.bone_primitive_add(name='upper_leg.R')
            bone = armature_data.edit_bones.get('upper_leg.R')
            bone.head.x = 0.1235
            bone.head.y = 0
            bone.head.z = 0.735
            
            bone.tail.x = 0.1235
            bone.tail.y = 0
            bone.tail.z = 0.4
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.lower_leg_r:
            bpy.ops.armature.bone_primitive_add(name='lower_leg.R')
            bone = armature_data.edit_bones.get('lower_leg.R')
            bone.head.x = 0.1235
            bone.head.y = 0
            bone.head.z = 0.4
            
            bone.tail.x = 0.1235
            bone.tail.y = 0
            bone.tail.z = 0.0625
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.foot_r:
            bpy.ops.armature.bone_primitive_add(name='foot.R')
            bone = armature_data.edit_bones.get('foot.R')
            bone.head.x = 0.1235
            bone.head.y = 0
            bone.head.z = 0.0625
            
            bone.tail.x = 0.1235
            bone.tail.y = 0.144
            bone.tail.z = 0
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.upper_leg_l:
            bpy.ops.armature.bone_primitive_add(name='upper_leg.L')
            bone = armature_data.edit_bones.get('upper_leg.L')
            bone.head.x = -0.1235
            bone.head.y = 0
            bone.head.z = 0.735
            
            bone.tail.x = -0.1235
            bone.tail.y = 0
            bone.tail.z = 0.4
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.lower_leg_l:
            bpy.ops.armature.bone_primitive_add(name='lower_leg.L')
            bone = armature_data.edit_bones.get('lower_leg.L')
            bone.head.x = -0.1235
            bone.head.y = 0
            bone.head.z = 0.4
            
            bone.tail.x = -0.1235
            bone.tail.y = 0
            bone.tail.z = 0.0625
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        if self.foot_l:
            bpy.ops.armature.bone_primitive_add(name='foot.L')
            bone = armature_data.edit_bones.get('foot.L')
            bone.head.x = -0.1235
            bone.head.y = 0
            bone.head.z = 0.0625
            
            bone.tail.x = -0.1235
            bone.tail.y = 0.144
            bone.tail.z = 0
            
            bone.roll = 0
            if self.mark_required:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_required_normal
                bone.color.custom.select = self.mark_required_select
                bone.color.custom.active = self.mark_required_active
        
        #generate bone Optional
        bpy.ops.armature.collection_add()
        armature_data.collections[1].name = "Optional"
        if self.jaw:
            bpy.ops.armature.bone_primitive_add(name='jaw')
            bone = armature_data.edit_bones.get('jaw')
            bone.head.x = 0
            bone.head.y = 0.12
            bone.head.z = 1.68
            
            bone.tail.x = 0
            bone.tail.y = 0.15
            bone.tail.z = 1.68
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.upperchest:
            bpy.ops.armature.bone_primitive_add(name='upperChest')
            bone = armature_data.edit_bones.get('upperChest')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 1.3
            
            bone.tail.x = 0
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.rightshoulder:
            bpy.ops.armature.bone_primitive_add(name='shoulder.R')
            bone = armature_data.edit_bones.get('shoulder.R')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = 0.2
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.leftshoulder:
            bpy.ops.armature.bone_primitive_add(name='shoulder.L')
            bone = armature_data.edit_bones.get('shoulder.L')
            bone.head.x = 0
            bone.head.y = 0
            bone.head.z = 1.5
            
            bone.tail.x = -0.2
            bone.tail.y = 0
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.righttoes:
            bpy.ops.armature.bone_primitive_add(name='toes.R')
            bone = armature_data.edit_bones.get('toes.R')
            bone.head.x = 0.1235
            bone.head.y = 0.144
            bone.head.z = 0
            
            bone.tail.x = 0.1235
            bone.tail.y = 0.26
            bone.tail.z = 0
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.lefttoes:
            bpy.ops.armature.bone_primitive_add(name='toes.L')
            bone = armature_data.edit_bones.get('toes.L')
            bone.head.x = -0.1235
            bone.head.y = 0.144
            bone.head.z = 0
            
            bone.tail.x = -0.1235
            bone.tail.y = 0.26
            bone.tail.z = 0
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            
        if self.thumb_r:
            bpy.ops.armature.bone_primitive_add(name='thumb_proximal.R')
            bone = armature_data.edit_bones.get('thumb_proximal.R')
            bone.head.x = 0.9315
            bone.head.y = 0.0389
            bone.head.z = 1.5
            
            bone.tail.x = 0.9567
            bone.tail.y = 0.0625
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='thumb_intermediate.R')
            bone = armature_data.edit_bones.get('thumb_intermediate.R')
            bone.head.x = 0.9567
            bone.head.y = 0.0625
            bone.head.z = 1.5
            
            bone.tail.x = 0.9755
            bone.tail.y = 0.08
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='thumb_distal.R')
            bone = armature_data.edit_bones.get('thumb_distal.R')
            bone.head.x = 0.9755
            bone.head.y = 0.08
            bone.head.z = 1.5
            
            bone.tail.x = 0.9896
            bone.tail.y = 0.0935
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.index_r:
            bpy.ops.armature.bone_primitive_add(name='index_proximal.R')
            bone = armature_data.edit_bones.get('index_proximal.R')
            bone.head.x = 0.9949
            bone.head.y = 0.029
            bone.head.z = 1.5
            
            bone.tail.x = 1.0243
            bone.tail.y = 0.029
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='index_intermediate.R')
            bone = armature_data.edit_bones.get('index_intermediate.R')
            bone.head.x = 1.0243
            bone.head.y = 0.029
            bone.head.z = 1.5
            
            bone.tail.x = 1.0465
            bone.tail.y = 0.029
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='index_distal.R')
            bone = armature_data.edit_bones.get('index_distal.R')
            bone.head.x = 1.0465
            bone.head.y = 0.029
            bone.head.z = 1.5
            
            bone.tail.x = 1.063
            bone.tail.y = 0.029
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.middle_r:
            bpy.ops.armature.bone_primitive_add(name='middle_proximal.R')
            bone = armature_data.edit_bones.get('middle_proximal.R')
            bone.head.x = 0.9949
            bone.head.y = 0.01
            bone.head.z = 1.5
            
            bone.tail.x = 1.0287
            bone.tail.y = 0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='middle_intermediate.R')
            bone = armature_data.edit_bones.get('middle_intermediate.R')
            bone.head.x = 1.0287
            bone.head.y = 0.01
            bone.head.z = 1.5
            
            bone.tail.x = 1.0545
            bone.tail.y = 0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='middle_distal.R')
            bone = armature_data.edit_bones.get('middle_distal.R')
            bone.head.x = 1.0545
            bone.head.y = 0.01
            bone.head.z = 1.5
            
            bone.tail.x = 1.074
            bone.tail.y = 0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.ring_r:
            bpy.ops.armature.bone_primitive_add(name='ring_proximal.R')
            bone = armature_data.edit_bones.get('ring_proximal.R')
            bone.head.x = 0.9949
            bone.head.y = -0.01
            bone.head.z = 1.5
            
            bone.tail.x = 1.023
            bone.tail.y = -0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='ring_intermediate.R')
            bone = armature_data.edit_bones.get('ring_intermediate.R')
            bone.head.x = 1.023
            bone.head.y = -0.01
            bone.head.z = 1.5
            
            bone.tail.x = 1.0452
            bone.tail.y = -0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='ring_distal.R')
            bone = armature_data.edit_bones.get('ring_distal.R')
            bone.head.x = 1.0452
            bone.head.y = -0.01
            bone.head.z = 1.5
            
            bone.tail.x = 1.0618
            bone.tail.y = -0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.little_r:
            bpy.ops.armature.bone_primitive_add(name='little_proximal.R')
            bone = armature_data.edit_bones.get('little_proximal.R')
            bone.head.x = 0.9949
            bone.head.y = -0.03
            bone.head.z = 1.5
            
            bone.tail.x = 1.0153
            bone.tail.y = -0.03
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='little_intermediate.R')
            bone = armature_data.edit_bones.get('little_intermediate.R')
            bone.head.x = 1.0153
            bone.head.y = -0.03
            bone.head.z = 1.5
            
            bone.tail.x = 1.0321
            bone.tail.y = -0.03
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='little_distal.R')
            bone = armature_data.edit_bones.get('little_distal.R')
            bone.head.x = 1.0321
            bone.head.y = -0.03
            bone.head.z = 1.5
            
            bone.tail.x = 1.0446
            bone.tail.y = -0.03
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            
            
        if self.thumb_l:
            bpy.ops.armature.bone_primitive_add(name='thumb_proximal.L')
            bone = armature_data.edit_bones.get('thumb_proximal.L')
            bone.head.x = -0.9315
            bone.head.y = 0.0389
            bone.head.z = 1.5
            
            bone.tail.x = -0.9567
            bone.tail.y = 0.0625
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='thumb_intermediate.L')
            bone = armature_data.edit_bones.get('thumb_intermediate.L')
            bone.head.x = -0.9567
            bone.head.y = 0.0625
            bone.head.z = 1.5
            
            bone.tail.x = -0.9755
            bone.tail.y = 0.08
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='thumb_distal.L')
            bone = armature_data.edit_bones.get('thumb_distal.L')
            bone.head.x = -0.9755
            bone.head.y = 0.08
            bone.head.z = 1.5
            
            bone.tail.x = -0.9896
            bone.tail.y = 0.0935
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.index_l:
            bpy.ops.armature.bone_primitive_add(name='index_proximal.L')
            bone = armature_data.edit_bones.get('index_proximal.L')
            bone.head.x = -0.9949
            bone.head.y = 0.029
            bone.head.z = 1.5
            
            bone.tail.x = -1.0243
            bone.tail.y = 0.029
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='index_intermediate.L')
            bone = armature_data.edit_bones.get('index_intermediate.L')
            bone.head.x = -1.0243
            bone.head.y = 0.029
            bone.head.z = 1.5
            
            bone.tail.x = -1.0465
            bone.tail.y = 0.029
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='index_distal.L')
            bone = armature_data.edit_bones.get('index_distal.L')
            bone.head.x = -1.0465
            bone.head.y = 0.029
            bone.head.z = 1.5
            
            bone.tail.x = -1.063
            bone.tail.y = 0.029
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.middle_l:
            bpy.ops.armature.bone_primitive_add(name='middle_proximal.L')
            bone = armature_data.edit_bones.get('middle_proximal.L')
            bone.head.x = -0.9949
            bone.head.y = 0.01
            bone.head.z = 1.5
            
            bone.tail.x = -1.0287
            bone.tail.y = 0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='middle_intermediate.L')
            bone = armature_data.edit_bones.get('middle_intermediate.L')
            bone.head.x = -1.0287
            bone.head.y = 0.01
            bone.head.z = 1.5
            
            bone.tail.x = -1.0545
            bone.tail.y = 0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='middle_distal.L')
            bone = armature_data.edit_bones.get('middle_distal.L')
            bone.head.x = -1.0545
            bone.head.y = 0.01
            bone.head.z = 1.5
            
            bone.tail.x = -1.074
            bone.tail.y = 0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.ring_l:
            bpy.ops.armature.bone_primitive_add(name='ring_proximal.L')
            bone = armature_data.edit_bones.get('ring_proximal.L')
            bone.head.x = -0.9949
            bone.head.y = -0.01
            bone.head.z = 1.5
            
            bone.tail.x = -1.023
            bone.tail.y = -0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='ring_intermediate.L')
            bone = armature_data.edit_bones.get('ring_intermediate.L')
            bone.head.x = -1.023
            bone.head.y = -0.01
            bone.head.z = 1.5
            
            bone.tail.x = -1.0452
            bone.tail.y = -0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='ring_distal.L')
            bone = armature_data.edit_bones.get('ring_distal.L')
            bone.head.x = -1.0452
            bone.head.y = -0.01
            bone.head.z = 1.5
            
            bone.tail.x = -1.0618
            bone.tail.y = -0.01
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
        if self.little_l:
            bpy.ops.armature.bone_primitive_add(name='little_proximal.L')
            bone = armature_data.edit_bones.get('little_proximal.L')
            bone.head.x = -0.9949
            bone.head.y = -0.03
            bone.head.z = 1.5
            
            bone.tail.x = -1.0153
            bone.tail.y = -0.03
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='little_intermediate.L')
            bone = armature_data.edit_bones.get('little_intermediate.L')
            bone.head.x = -1.0153
            bone.head.y = -0.03
            bone.head.z = 1.5
            
            bone.tail.x = -1.0321
            bone.tail.y = -0.03
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            bpy.ops.armature.bone_primitive_add(name='little_distal.L')
            bone = armature_data.edit_bones.get('little_distal.L')
            bone.head.x = -1.0321
            bone.head.y = -0.03
            bone.head.z = 1.5
            
            bone.tail.x = -1.0446
            bone.tail.y = -0.03
            bone.tail.z = 1.5
            
            bone.roll = 0
            if self.mark_optional:
                bone.color.palette = 'CUSTOM'
                bone.color.custom.normal = self.mark_optional_normal
                bone.color.custom.select = self.mark_optional_select
                bone.color.custom.active = self.mark_optional_active
            
        #atur parent bone#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        if self.thumb_r:
            bone = armature_data.edit_bones.get('thumb_proximal.R')
            bone1 = armature_data.edit_bones.get('thumb_intermediate.R')
            bone2 = armature_data.edit_bones.get('thumb_distal.R')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.R')
                bone1 = armature_data.edit_bones.get('thumb_proximal.R')
                
                bone1.parent = bone
        if self.index_r:
            bone = armature_data.edit_bones.get('index_proximal.R')
            bone1 = armature_data.edit_bones.get('index_intermediate.R')
            bone2 = armature_data.edit_bones.get('index_distal.R')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.R')
                bone1 = armature_data.edit_bones.get('index_proximal.R')
                
                bone1.parent = bone
        if self.middle_r:
            bone = armature_data.edit_bones.get('middle_proximal.R')
            bone1 = armature_data.edit_bones.get('middle_intermediate.R')
            bone2 = armature_data.edit_bones.get('middle_distal.R')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.R')
                bone1 = armature_data.edit_bones.get('middle_proximal.R')
                
                bone1.parent = bone
        if self.ring_r:
            bone = armature_data.edit_bones.get('ring_proximal.R')
            bone1 = armature_data.edit_bones.get('ring_intermediate.R')
            bone2 = armature_data.edit_bones.get('ring_distal.R')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.R')
                bone1 = armature_data.edit_bones.get('ring_proximal.R')
                
                bone1.parent = bone
        if self.little_r:
            bone = armature_data.edit_bones.get('little_proximal.R')
            bone1 = armature_data.edit_bones.get('little_intermediate.R')
            bone2 = armature_data.edit_bones.get('little_distal.R')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.R')
                bone1 = armature_data.edit_bones.get('little_proximal.R')
                
                bone1.parent = bone
        if self.thumb_l:
            bone = armature_data.edit_bones.get('thumb_proximal.L')
            bone1 = armature_data.edit_bones.get('thumb_intermediate.L')
            bone2 = armature_data.edit_bones.get('thumb_distal.L')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.L')
                bone1 = armature_data.edit_bones.get('thumb_proximal.L')
                
                bone1.parent = bone
        if self.index_l:
            bone = armature_data.edit_bones.get('index_proximal.L')
            bone1 = armature_data.edit_bones.get('index_intermediate.L')
            bone2 = armature_data.edit_bones.get('index_distal.L')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.L')
                bone1 = armature_data.edit_bones.get('index_proximal.L')
                
                bone1.parent = bone
        if self.middle_l:
            bone = armature_data.edit_bones.get('middle_proximal.L')
            bone1 = armature_data.edit_bones.get('middle_intermediate.L')
            bone2 = armature_data.edit_bones.get('middle_distal.L')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.L')
                bone1 = armature_data.edit_bones.get('middle_proximal.L')
                
                bone1.parent = bone
        if self.ring_l:
            bone = armature_data.edit_bones.get('ring_proximal.L')
            bone1 = armature_data.edit_bones.get('ring_intermediate.L')
            bone2 = armature_data.edit_bones.get('ring_distal.L')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.L')
                bone1 = armature_data.edit_bones.get('ring_proximal.L')
                
                bone1.parent = bone
        if self.little_l:
            bone = armature_data.edit_bones.get('little_proximal.L')
            bone1 = armature_data.edit_bones.get('little_intermediate.L')
            bone2 = armature_data.edit_bones.get('little_distal.L')
            
            bone2.parent = bone1
            bone1.parent = bone
            
            bone2.use_connect = True
            bone1.use_connect = True
            
            if self.hand_r:
                bone = armature_data.edit_bones.get('hand.L')
                bone1 = armature_data.edit_bones.get('little_proximal.L')
                
                bone1.parent = bone
        if self.root and self.hips:
            bone = armature_data.edit_bones.get('root')
            bone1 = armature_data.edit_bones.get('hips')
            
            bone1.parent = bone
        if self.hips and self.spine:
            bone = armature_data.edit_bones.get('hips')
            bone1 = armature_data.edit_bones.get('spine')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.spine and self.chest:
            bone = armature_data.edit_bones.get('spine')
            bone1 = armature_data.edit_bones.get('chest')
            
            bone1.parent = bone
        if self.chest and self.upperchest:
            bone = armature_data.edit_bones.get('chest')
            bone1 = armature_data.edit_bones.get('upperChest')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.neck:
            bone = armature_data.edit_bones.get('neck')
            if self.upperchest:
                bone1 = armature_data.edit_bones.get('upperChest')
                bone.parent = bone1
            elif self.chest:
                bone1 = armature_data.edit_bones.get('chest')
                bone.parent = bone1
        if self.neck and self.head:
            bone = armature_data.edit_bones.get('neck')
            bone1 = armature_data.edit_bones.get('head')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.head and self.rightreye:
            bone = armature_data.edit_bones.get('head')
            bone1 = armature_data.edit_bones.get('RightEye')
            
            bone1.parent = bone
        if self.head and self.lefteye:
            bone = armature_data.edit_bones.get('head')
            bone1 = armature_data.edit_bones.get('LeftEye')
            
            bone1.parent = bone
        if self.head and self.jaw:
            bone = armature_data.edit_bones.get('head')
            bone1 = armature_data.edit_bones.get('jaw')
            
            bone1.parent = bone
        if self.rightshoulder:
            bone = armature_data.edit_bones.get('shoulder.R')
            if self.upperchest:
                bone1 = armature_data.edit_bones.get('upperChest')
                bone.parent = bone1
            elif self.chest:
                bone1 = armature_data.edit_bones.get('chest')
                bone.parent = bone1
        if self.leftshoulder:
            bone = armature_data.edit_bones.get('shoulder.L')
            if self.upperchest:
                bone1 = armature_data.edit_bones.get('upperChest')
                bone.parent = bone1
            elif self.chest:
                bone1 = armature_data.edit_bones.get('chest')
                bone.parent = bone1
        if self.upper_arm_r:
            bone = armature_data.edit_bones.get('upper_arm.R')
            if self.rightshoulder:
                bone1 = armature_data.edit_bones.get('shoulder.R')
                bone.parent = bone1
            elif self.upperchest:
                bone1 = armature_data.edit_bones.get('upperChest')
                bone.parent = bone1
            elif self.chest:
                bone1 = armature_data.edit_bones.get('chest')
                bone.parent = bone1
        if self.upper_arm_l:
            bone = armature_data.edit_bones.get('upper_arm.L')
            if self.leftshoulder:
                bone1 = armature_data.edit_bones.get('shoulder.L')
                bone.parent = bone1
            elif self.upperchest:
                bone1 = armature_data.edit_bones.get('upperChest')
                bone.parent = bone1
            elif self.chest:
                bone1 = armature_data.edit_bones.get('chest')
                bone.parent = bone1
        if self.upper_arm_r and self.lower_arm_r:
            bone = armature_data.edit_bones.get('upper_arm.R')
            bone1 = armature_data.edit_bones.get('lower_arm.R')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.upper_arm_l and self.lower_arm_l:
            bone = armature_data.edit_bones.get('upper_arm.L')
            bone1 = armature_data.edit_bones.get('lower_arm.L')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.lower_arm_r and self.hand_r:
            bone = armature_data.edit_bones.get('lower_arm.R')
            bone1 = armature_data.edit_bones.get('hand.R')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.lower_arm_l and self.hand_l:
            bone = armature_data.edit_bones.get('lower_arm.L')
            bone1 = armature_data.edit_bones.get('hand.L')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.hips and self.upper_leg_r:
            bone = armature_data.edit_bones.get('hips')
            bone1 = armature_data.edit_bones.get('upper_leg.R')
            
            bone1.parent = bone
        if self.hips and self.upper_leg_l:
            bone = armature_data.edit_bones.get('hips')
            bone1 = armature_data.edit_bones.get('upper_leg.L')
            
            bone1.parent = bone
        if self.upper_leg_r and self.lower_leg_r:
            bone = armature_data.edit_bones.get('upper_leg.R')
            bone1 = armature_data.edit_bones.get('lower_leg.R')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.upper_leg_l and self.lower_leg_l:
            bone = armature_data.edit_bones.get('upper_leg.L')
            bone1 = armature_data.edit_bones.get('lower_leg.L')
            
            bone1.parent = bone
            bone1.use_connect = True
        if self.lower_leg_r and self.foot_r:
            bone = armature_data.edit_bones.get('lower_leg.R')
            bone1 = armature_data.edit_bones.get('foot.R')
            
            bone1.parent = bone
        if self.lower_leg_l and self.foot_l:
            bone = armature_data.edit_bones.get('lower_leg.L')
            bone1 = armature_data.edit_bones.get('foot.L')
            
            bone1.parent = bone
        if self.foot_r and self.righttoes:
            bone = armature_data.edit_bones.get('foot.R')
            bone1 = armature_data.edit_bones.get('toes.R')
            
            bone1.parent = bone
        if self.foot_l and self.lefttoes:
            bone = armature_data.edit_bones.get('foot.L')
            bone1 = armature_data.edit_bones.get('toes.L')
            
            bone1.parent = bone
        
        bpy.ops.armature.select_all(action='DESELECT')
        bpy.ops.object.mode_set(mode='OBJECT')
        
        if self.terap == True:
            bpy.ops.obj.cek_rig()
        
        return {'FINISHED'}
    
    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)
    
    def draw(self, context):
        scene = context.scene
        meta = scene.vrm_meta
        
        layout = self.layout
        layout.use_property_split = False
        layout.use_property_decorate = False
        
        layout = self.layout
        layout.prop(self, "nama")
        layout.label(text="Add Bone:")
        
        box = layout.box()
        kotak = box.column()
        kotak.scale_y = 0.9
        kotak = kotak.split()
        col = kotak.column()
        col.label(text="Required Bone:")
        
        #Required Bone
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="General")
        split = dalam.split()
        dalam = split.column()
        dalam.prop(self, "root")
        dalam.prop(self, "hips")
        dalam.prop(self, "spine")
        dalam = split.column()
        dalam.prop(self, "chest")
        dalam.prop(self, "neck")
        dalam.prop(self, "head")
        
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="Eye")
        split = dalam.split()
        dalam = split.column()
        dalam.prop(self, "rightreye")
        dalam = split.column()
        dalam.prop(self, "lefteye")
        
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="Arm")
        split = dalam.split()
        dalam = split.column()
        dalam.label(text="Right")
        dalam.prop(self, "upper_arm_r")
        dalam.prop(self, "lower_arm_r")
        dalam.prop(self, "hand_r")
        dalam = split.column()
        dalam.label(text="Left")
        dalam.prop(self, "upper_arm_l")
        dalam.prop(self, "lower_arm_l")
        dalam.prop(self, "hand_l")
        
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="Leg")
        split = dalam.split()
        dalam = split.column()
        dalam.label(text="Right")
        dalam.prop(self, "upper_leg_r")
        dalam.prop(self, "lower_leg_r")
        dalam.prop(self, "foot_r")
        dalam = split.column()
        dalam.label(text="Left")
        dalam.prop(self, "upper_leg_l")
        dalam.prop(self, "lower_leg_l")
        dalam.prop(self, "foot_l")
        
        kotak = kotak.split()
        col = kotak.column()
        col.label(text="Optional Bone:")
        
        #Optional Bone
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="General")
        split = dalam.split()
        dalam = split.column()
        dalam.prop(self, "jaw")
        dalam.prop(self, "upperchest")
        
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="Shoulder")
        split = dalam.split()
        dalam = split.column()
        dalam.prop(self, "rightshoulder")
        dalam = split.column()
        dalam.prop(self, "leftshoulder")
        
        
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="Finger")
        split = dalam.split()
        dalam = split.column()
        dalam.label(text="Right")
        dalam.prop(self, "thumb_r")
        dalam.prop(self, "index_r")
        dalam.prop(self, "middle_r")
        dalam.prop(self, "ring_r")
        dalam.prop(self, "little_r")
        dalam = split.column()
        dalam.label(text="Left")
        dalam.prop(self, "thumb_l")
        dalam.prop(self, "index_l")
        dalam.prop(self, "middle_l")
        dalam.prop(self, "ring_l")
        dalam.prop(self, "little_l")
        
        
        dalam = col.box()
        dalam = dalam.column()
        dalam.label(text="Toes")
        split = dalam.split()
        dalam = split.column()
        dalam.prop(self, "righttoes")
        dalam = split.column()
        dalam.prop(self, "lefttoes")
        
        layout.label(text="Mark With Color:")
        box = layout.box()
        col = box.column()
        kotak.scale_y = 0.9
        split = col.split()
        maprop = split.row()
        maprop.prop(self, "mark_required")
        maprop = split.row(align=True)
        maprop.enabled = self.mark_required
        maprop.prop(self, "mark_required_normal", text= "")
        maprop.prop(self, "mark_required_select", text= "")
        maprop.prop(self, "mark_required_active", text= "")
        split = col.split()
        maprop = split.row()
        maprop.prop(self, "mark_optional")
        maprop = split.row(align=True)
        maprop.enabled = self.mark_optional
        maprop.prop(self, "mark_optional_normal", text= "")
        maprop.prop(self, "mark_optional_select", text= "")
        maprop.prop(self, "mark_optional_active", text= "")
        
        layout.prop(self, "terap")
        
        
    
classes = [
    buat_mhv,
    buat_bsk,
    buat_rig,
    cek_struktur_rig,
    info_rig_masalah#,
    #jinggle_collider
]
        
def register():
    for cls in classes:
        bpy.utils.register_class(cls)
        
def unregister():
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)

if __name__ == "__main__":
    register()